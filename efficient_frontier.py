# -*- coding: utf-8 -*-
"""Copy of Efficient Frontier Eastern Bulls
malin
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzPfNkcDkF-Ax1l5GVrPJww8Wt4QA2r4
"""

#Description: this program attempts to optimize an user's portfolio using the Efficient Frontier
# import libraries

from pandas_datareader import data as web
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

# get the stock symbols/tickers in the portfolio
assets = ['SJVN.NS','PLOW','SFM','NTES','PFE','PG','EL','JPM','JNJ','COST','PCAR','PYPL','SFIX','SHOP','OTB.L']

# assign weights to the stocks. total = 1
weights = np.array([0.08476,0.01982,0,0.04242,0,0,0,0,0,0.31703,0, 0.03423,0,0.46677,0.04242])

# get the stocks/portfolio starting and ending date
stockStartDate = '2014-01-01'
today = datetime.today().strftime('%Y-%m-%d')
today

# create a dataframe to store the adjusted close price
df = pd.DataFrame()

#store
for stock in assets:
    print(stock)
    df['stock']=web.DataReader(stock, data_source='yahoo', start=stockStartDate, end=today)['Adj Close']

# visually show the stock / portfolio
title = 'Portfolio Adj. Close Price History'
my_stocks = df
#create and plot the graph
for c in my_stocks.columns.values:
    plt.plot(my_stocks[c],label = c)

plt.title(title)
plt.xlabel("Date", fontsize = 18)
plt.ylabel('Adj. Price USD ($)', fontsize = 18)
plt.legend(my_stocks.columns.values, loc='upper left')
plt.show()

"""most expensive: shop

"""

returns = df.pct_change()
returns
#this is the daily returns

# create and show the annualized covariance matrix
cov_matrix_annual = returns.cov() * 252
cov_matrix_annual

#Calculate the portfolio variance
port_variance = np.dot(weights.T, np.dot(cov_matrix_annual, weights))
port_variance

# calculate the portfolio volatility (standard deviation)
port_volatility = np.sqrt(port_variance)
port_volatility

#calculate annual portfolio return
portfolioSimpleAnnualReturn = np.sum(returns.mean()*weights) * 252
portfolioSimpleAnnualReturn

#show the expected annual return, volatility (risk), and variance
percent_var = str(round(port_variance, 2)*100) + '%'
percent_vols = str(round(port_volatility, 2)*100) + '%'
percent_ret=str(round(portfolioSimpleAnnualReturn,2)*100)+'%'
print("Expected Annual return: " + percent_ret)
print('Annual volatility / risk' + percent_vols)
print("Annual variance: "+ percent_var)


from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

#Portfolio Optimization
#calculate the expected returns and annualized sample covariance matrix of asset returns
mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)
#optimize for max sharpe ratio (compares to risk free investment like bonds)
ef = EfficientFrontier(mu,S)
weights = ef.max_sharpe()
cleaned_weights = ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose = True)
perf = ef.portfolio_performance(verbose = True)

#get the discrete allocation of each share per stock
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices
latest_prices = get_latest_prices(df)
weights = cleaned_weights
da = DiscreteAllocation(weights,latest_prices, total_portfolio_value=100000)
allocation, leftover = da.lp_portfolio()
print('Discrete allocation:', allocation)
print('Funds remaining: ${:.2f}'.format(leftover))